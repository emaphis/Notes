Haskell technicalities.

* Set up a new project with Cabal

** building Haskell programs with modules

cabal init

edit cabal file
#+BEGIN_SRC haskell
-- Initial hello-haskell.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                hello-haskell
version:             0.1.0.0
synopsis:            Hello World App
-- description:
license:             BSD3
license-file:        LICENSE
author:              Ed Maphis
maintainer:          emaphis85@gmail.com
-- copyright:
category:            Text
build-type:          Simple
extra-source-files:  ChangeLog.md
cabal-version:       >=1.10

executable hello-haskell
  main-is:             Main.hs
  -- other-modules:
  -- other-extensions:
  build-depends:       base >=4.10 && <4.11
  hs-source-dirs:      src
  default-language:    Haskell2010
#+END_SRC

executable hello-haskell
  main-is:             Main.hs
  ghc-options:         -Wall -fwarn-tabs

Make a 'src' directory for source code

Make a file called Main.hs for the main Haskell program.

Initialize git.
 git init  (maybe create on github then git clone)
 git add . 
 git commit -m "Initial commit"

$ cabal sandbox init
$ cabal install --only-dependencies

$ cabal build

$ ./dist/build/hello-haskell/hello-haskell Hello from Haskell! $
-- or
$ cabal repl
 *Main> main
 Hello from Haskell!

** Making our own modules

Modules always begin with a header

#+BEGIN_SRC haskell
module Morse ( Morse
              , charToMorse
              , morseToChar
              , stringToMorse
              , letterToMorse
              , morseToLetter
              ) where
#+END_SRC

module Hello where ...

** Using the REPL with a Cabal project
$ cabal repl

-- with an executable clause in .cabal
$ cabal repl hello-haskell

** Refactoring into a library

#+BEGIN_SRC haskell

#+END_SRC

** using the Cabal package manager

** project conventions
