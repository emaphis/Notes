* doc source - clojure.repl/*
(require '[clojure.repl :refer :all])
* Project layout.

lein new app my-stuff

.
./.gitignore
./doc
./doc/intro.md
./LICENSE
./project.clj
./README.md
./resources
./src
./src/my_stuff
./src/my_stuff/core.clj
./test
./test/my_stuff
./test/my_stuff/core_test.clj

- note on name space
Note that we use my-stuff.core instead of just my-stuff since
 single-segment namespaces are discouraged in Clojure.
 Also note that namespaces with dashes in the name will have
 the corresponding file named with underscores instead since
 the JVM has trouble loading files with dashes in the name.

- Update project.clj
#+BEGIN_SRC clojure
:dependencies [[org.clojure/clojure "1.10.1"]
                 [clj-http "2.0.0"]]

#+END_SRC

user=> (require 'my-stuff.core)
user=> (require '[clj-http.client :as http])
user=> (def response (http/get "http://leiningen.org"))
#'user/response
user=> (keys response)
(:status :headers :body :request-time :trace-redirects :orig-content-encoding)

** running

$ lein run
Hello, World!

To run programs without lein in memory
$ lein trampoline run -m my-stuff.server 5000

** running tests

$ lein test

$ lein test my-stuff.core-test

* name spaces
see:
https://8thlight.com/blog/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html
https://stuartsierra.com/2016/clojure-how-to-ns.html
- load a namespace
(require ​'clojure.data​)

(ns blottsbooks.core)

src/blottsbooks/core.clj

(ns blottsbooks.core
  (:require blottsbooks.pricing
            [blottsbooks.pricing :as pricing])
  (:gen-class))

(require '[blottsbooks.pricing :as pricing])
(require '[blottsbooks.pricing :refer [discount-price]])
(require '[clojure.core :refer :all])
 (require :reload '[blottsbooks.pricing :as pricing]) ;; reload

(println "Current ns: " *ns*)
(ns-map (find-ns 'user))
(ns-unmap ​'blottsbooks.pricing​ ​'discount-price​)
(defonce some-value (function-with-side-effects))

* Testing
** property based
https://8thlight.com/blog/guest/2015/05/06/reid-draper-guest-blog.html
https://github.com/clojure/test.check/blob/master/doc/intro.md
https://github.com/deanwampler/property-based-testing

** Running tests using lein or at repl.
$ lein test
lein test my-stuff.core-test

=> (run-tests)
=> (run-tests & namespaces)

** Midje
[midje/midje "1.9.8"]
[midje "1.9.1"]
:plugins [[lein-midje "3.2.1"]
Use EMidje mode for emacs.
https://github.com/nubank/matcher-combinators
* REPL
Guide : https://lambdaisland.com/guides/clojure-repls
** .profile

https://github.com/gfredericks/dotfiles/blob/master/base/.lein/profiles.clj.symlink
https://github.com/technomancy/slamhound
https://github.com/jonase/kibit

** stuff
https://github.com/gfredericks/repl-utils
Advanced repl
https://github.com/Unrepl

** Use:
** Rebel readline

lein trampoline run -m rebel-readline.main

* The language
** Simple

Code that checks to see whether as string is blank.

#+BEGIN_SRC java
  public class StringUtils {
      public static boolean isBlank(String str) {
          int strLen;
          if (str == null || (strLen = str.length()) == 0) {
              return true;
          }
          for (int i = 0; i < strLen; i++) {
              if ((Character.isWhitespace(str.charAt(i)) == false)) {
                  return false;
              }
          } return true;
      }
  }
#+END_SRC

Same code in Clojure
#+BEGIN_SRC clojure
  (defn blank? [str]
    (every? #(Character/isWhitespace %) str))
#+END_SRC
Lol!

** (read-line)
user=> (read-line)
line to be read      ;Type text into console
"line to be read"

; (flush) is needed for displaying the prompt. Print stays in a buffer otherwise.
user=> (do (print "What's your name? ") (flush) (read-line))
What's your name? Clojure
"Clojure"

(println "Enter something> ")
(def x (read-line))
(println (str "You typed \"" x "\""))

** read/write a file
 (spit "./src/myapp/outtest.txt"  "Out test text")
 (slurp "./src/myapp/outtest.txt")

** clojure-repl
** (require )
;; Require clojure.java.io and call its file function:
user=> (require '(clojure.java.io))
user=> (clojure.java.io/file "filename")
#<File filename>
-
;; alias clojure.java.io as io
user=> (require '[clojure.java.io :as io])
nil

user=> (io/file "Filename")
#<File Filename>

;; alias clojure.java.io as io using prefixes
user=> (require '(clojure.java [io :as io2]))
nil

user=> (io2/file "Filename")
#<File Filename>

(require '[clojure.repl :refer :all])

** (ns)
- example
(ns foo.bar
  (:refer-clojure :exclude [ancestors printf])
  (:require (clojure.contrib sql combinatorics))
  (:use (my.lib this that))
  (:import (java.util Date Timer Random)
           (java.sql Connection Statement)))
** Java interface
*** gen-class
https://kotka.de/blog/2010/02/gen-class_how_it_works_and_how_to_use_it.html

* HTDP header
#+BEGIN_SRC clojure
  ;; header of  HTDP
  (ns speck.testing
     (:require [clojure.test :refer :all]
               [clojure.spec.alpha :as s]
	       [clojure.spec.gen.alpha :as gen]
	       [clojure.spec.test.alpha :as stest]
	       [clojure.repl :as r]
	       [htdp.util :refer :all]
	       [clojure.string :as str]))
#+END_SRC

#+BEGIN_SRC clojure
  ;; header of  HTDP
  (ns living.whatever
     (:require [clojure.test :refer :all]
               [clojure.spec.alpha :as s]
	       [clojure.spec.gen.alpha :as gen]
	       [clojure.spec.test.alpha :as stest]
	       [clojure.repl :as r]
	       [clojure.string :as str]))
#+END_SRC
* repl
** rebel-readline
- Add [com.bhauman/rebel-readline "0.1.4"] to the dependencies in your project.clj
  lein trampoline run -m rebel-readline.main
{
 ...
 :aliases {"rebl" ["trampoline" "run" "-m" "rebel-readline.main"]}
}
Alternatively, you can do this globally in $HOME/.lein/profiles.clj:
{
 ...
 :user {:aliases {"rebl" ["trampoline" "run" "-m" "rebel-readline.main"]}}
}
Now you can start a rebel-readline REPL with lein rebl.

- clojure -Sdeps "{:deps {com.bhauman/rebel-readline {:mvn/version \"0.1.4\"}}}" -m rebel-readline.main
- 
* Clojurescript
- workshop <https://github.com/ClojureTO/JS-Workshop> 
- Add library dependency to your project
[cider/piggieback "0.4.1"]
[org.clojure/clojure "1.9.0"]

:repl-options {:nrepl-middleware [cider.piggieback/wrap-cljs-repl]}
to project.clj
* Clojure style database
https://github.com/tonsky/datascript
https://github.com/replikativ/datahike
